using MelonLoader;
using UnityEngine;
using System.IO;
using System.Collections.Generic;
using chempInput; // Make sure ChempInput.dll is referenced

[assembly: MelonInfo(typeof(ChempMod), "Cosmetics", "0.0.1", "WesGoof")]
[assembly: MelonGame("ChemPhysicsCompany", "ChemPhysics")]

public class ChempMod : MelonMod
{
    private class CosmeticCategory
    {
        public string Name;
        public List<GameObject> Prefabs = new List<GameObject>();
        public GameObject ActiveCosmetic;
        public int SelectorIndex = 0;
    }

    private static List<CosmeticCategory> categories = new List<CosmeticCategory>();
    private static bool menuOpen = false;
    private static int currentCategoryIndex = 0;
    private float lastMoveTime = 0f;
    private float moveCooldown = 0.25f;

    private string cosmeticsPath = "Mods/Cosmetics";

    public override void OnInitializeMelon()
    {
        LoadAllCosmetics(cosmeticsPath);
        MelonLogger.Msg($"Loaded {categories.Count} cosmetic categories!");
    }

    private void LoadAllCosmetics(string folderPath)
    {
        if (!Directory.Exists(folderPath))
        {
            MelonLogger.Warning($"Cosmetics folder not found at: {folderPath}");
            return;
        }

        foreach (var file in Directory.GetFiles(folderPath))
        {
            if (Path.GetExtension(file) != ".bundle") continue;

            var bundle = AssetBundle.LoadFromFile(file);
            if (bundle == null) continue;

            var category = new CosmeticCategory();
            category.Name = Path.GetFileNameWithoutExtension(file);

            foreach (var assetName in bundle.GetAllAssetNames())
            {
                var prefab = bundle.LoadAsset<GameObject>(assetName);
                if (prefab != null) category.Prefabs.Add(prefab);
            }

            if (category.Prefabs.Count > 0)
                categories.Add(category);
        }
    }

    public override void OnUpdate()
    {
        if (categories.Count == 0) return;

        // Menu button (left hand)
        if (ChempInput.menuButtonDown) menuOpen = !menuOpen;
        if (!menuOpen) return;

        // Left thumbstick for navigation
        Vector2 joystick = ChempInput.leftThumbstickVector;
        if (Time.time - lastMoveTime > moveCooldown)
        {
            if (joystick.x > 0.5f) NextCosmetic();
            else if (joystick.x < -0.5f) PrevCosmetic();

            if (joystick.y > 0.5f) NextCategory();
            else if (joystick.y < -0.5f) PrevCategory();

            lastMoveTime = Time.time;
        }

        // A button = left primary button
        if (ChempInput.leftPrimaryDown) ToggleCosmetic();
    }

    private void NextCosmetic()
    {
        var cat = categories[currentCategoryIndex];
        cat.SelectorIndex = (cat.SelectorIndex + 1) % cat.Prefabs.Count;
    }

    private void PrevCosmetic()
    {
        var cat = categories[currentCategoryIndex];
        cat.SelectorIndex = (cat.SelectorIndex - 1 + cat.Prefabs.Count) % cat.Prefabs.Count;
    }

    private void NextCategory()
    {
        currentCategoryIndex = (currentCategoryIndex + 1) % categories.Count;
    }

    private void PrevCategory()
    {
        currentCategoryIndex = (currentCategoryIndex - 1 + categories.Count) % categories.Count;
    }

    private void ToggleCosmetic()
    {
        var cat = categories[currentCategoryIndex];
        var prefab = cat.Prefabs[cat.SelectorIndex];

        if (cat.ActiveCosmetic != null)
            Object.Destroy(cat.ActiveCosmetic);

        var head = Camera.main.transform;
        cat.ActiveCosmetic = Object.Instantiate(prefab, head.position, head.rotation);
        cat.ActiveCosmetic.transform.SetParent(head, true);

        MelonLogger.Msg($"Equipped {prefab.name} in category {cat.Name}");
    }

    public override void OnGUI()
    {
        if (!menuOpen || categories.Count == 0) return;

        Vector3 uiPos = Camera.main.transform.position + Camera.main.transform.forward * 2f;
        Vector3 screenPos = Camera.main.WorldToScreenPoint(uiPos);

        GUI.Box(new Rect(screenPos.x - 100, Screen.height - screenPos.y - 150, 200, 120), "Cosmetics");

        CosmeticCategory cat = categories[currentCategoryIndex];
        if (cat.Prefabs.Count > 0)
        {
            string selected = cat.Prefabs[cat.SelectorIndex].name;
            GUI.Label(new Rect(screenPos.x - 80, Screen.height - screenPos.y - 120, 160, 30),
                      $"> {selected} < ({cat.Name})");
        }
    }
}